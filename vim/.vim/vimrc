" Author: Wasim Lorgat
" Source: http://github.com/seem/dotfiles/vim/.vimrc
" TODO: Remove most plugins...

" General {{{

" Basics {{{

" set nomodeline

set hidden
set ttyfast
set lazyredraw

" Windows.
" Set focus to the newly splitted window when using :sp or :vsp.
set splitbelow
set splitright

" Allow backspacing over these symbols (sane behaviour)
set backspace=indent,eol,start

set showcmd
set ruler
set laststatus=2

" Line numbers
set number relativenumber
set numberwidth=5

" TODO: Keep autowrite and autoread?
" set autowrite

" Reload files that are edited externally.
set autoread

" " set shiftround
" set title
" set linebreak
" set colorcolumn=+1
" set diffopt+=vertical
" " TODO: longest?
" set completeopt=longest,menuone
" " TODO: Needed?
" set nostartofline              " avoid going to start of line on certain commands
" set signcolumn=yes
" set path=.,**

" }}}
" Wildmenu completion {{{

set wildmenu
set wildignorecase
" set wildmode=list:full                               " Bash-like completion
set wildignore+=.DS_Store                            " MacOS
set wildignore+=__pycache__,mypy_cache,venv,*.pyc    " Python
set wildignore+=.git                                 " Version control
set wildignore+=.vscode                              " VSCode

" }}}
" Mouse {{{

" Enable mouse for all modes
if has('mouse')
    set mouse=a                    
endif

" Fix mouse pane resizing inside tmux.
" See: https://superuser.com/questions/549930/cant-resize-vim-splits-inside-tmux
if &term =~ '^screen'
    set ttymouse=xterm2
endif

" }}}
" Backups {{{

" Persist undo history 
set undofile
set backup
set swapfile

set undodir=~/.vim/tmp/undo//
set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//

" Make above folders automatically if they don't already exist
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

" }}}
" Indentation {{{

" Indent (>>) and dedent (<<) with 4 spaces.
set shiftwidth=4
" <Tab> and <BS> are worth 'shiftwidth' spaces.
let &softtabstop = &shiftwidth
" Disable conversion of 'tabstop' spaces to a \t character, they remain spaces.
set expandtab

" }}}
" Wrapping {{{

" Disable soft wrapping.
set nowrap
" Side-scroll 5 columns at a time for long lines
set sidescroll=5

" TODO: This is file-type-specific...
" set textwidth=80
" set colorcolumn=+1
" TODO: format options
set formatoptions=qrn1j

" }}}
" Search {{{

set incsearch
set hlsearch

" }}}

" }}}
" Plugins {{{

call plug#begin('~/.vim/plugged')

" Basics {{{

Plug 'tpope/vim-sensible'               " 'Defaults everyone can agree on'
Plug 'tpope/vim-surround'               " s is a text-object for delimiters; ss linewise; ys to add surround
Plug 'tpope/vim-commentary'             " gc is an operator to toggle comments; gcc linewise
Plug 'tpope/vim-repeat'                 " make vim-commentary and vim-surround work with `.`
Plug 'tpope/vim-vinegar'                " enhance the built-in netrw file explorer
Plug 'romainl/vim-cool'                 " only highlight search while typing
Plug 'christoomey/vim-tmux-navigator'

" }}}
" Features {{{

Plug 'tpope/vim-fugitive'
Plug 'jpalardy/vim-slime'               " sending text between terminals
" Plug 'w0rp/ale'                         " asynchronous lint engine
" Plug 'christoomey/vim-tmux-navigator'   " seamless vim-tmux pane movement
" TODO: Ultisnips?
" TODO: CtrlP?
" TODO: NerdTree?
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }

" }}}
" Colors {{{

Plug 'cocopon/iceberg.vim'
Plug 'lifepillar/vim-solarized8'
Plug 'NLKNguyen/papercolor-theme'
Plug 'w0ng/vim-hybrid'

" }}}

call plug#end()

" Plugin Settings
let g:pymode_python = 'python3'
let g:pymode_options_max_line_length = 100

" }}}
" Visual {{{

" True color support
" See: https://github.com/vim/vim/issues/993#issuecomment-255651605
" Set Vim-specific sequences for RGB colors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors

syntax on
" TODO: Enable these after plugin management is enabled...
set background=dark
colorscheme solarized8_high

" Highlight git merge conflict markers using the ErrorMsg highlight group
" TODO: Cause slow down?...
" match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" Highlight current line, bold current line number
set cursorline
highlight CursorLineNR cterm=bold

" Precede a long line with '<', end a long line with '>'
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·
set list
let &showbreak="↪ "

" }}}
" GUI {{{

set guifont=Menlo:h12

" Disable scrollbars
set guioptions=

" Disable cursor blinking
set guicursor+=n-v-c:blinkon0

" }}}

" vim: foldmethod=marker:foldlevel=0
